// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Init get Zero value
    Not16(in=x, out=notXZ);
    And16(a=notXZ, b=x, out=zero, out[7..15]=zero715);

    // Zero X or Y
    Mux16(a=x, b=zero, sel=zx, out=ZeroOrX);
    Mux16(a=y, b=zero, sel=zy, out=ZeroOrY);

    // Negate X or Y
    Not16(in=ZeroOrX, out=notX);
    Not16(in=ZeroOrY, out=notY);
    Mux16(a=ZeroOrX, b=notX, sel=nx, out=finalX);
    Mux16(a=ZeroOrY, b=notY, sel=ny, out=finalY);

    // Sum or And
    Add16(a=finalX, b=finalY, out=sumXY);
    And16(a=finalX, b=finalY, out=andXY);
    Mux16(a=andXY, b=sumXY, sel=f, out=operationXY);

    // Negate OUT or not
    Not16(in=operationXY, out=notOperationXY);

    // Return result and NG flag
    Mux16(a=operationXY, b=notOperationXY, sel=no, out=out, out[0..7]=isZeroIn07, out[8..15]=isZeroIn815, out[15]=ng);

    // Return ZR flag
    Or8Way(in=isZeroIn07, out=or1);
    Or8Way(in=isZeroIn815, out=or2);
    Or(a=or1, b=or2, out=or3);
    Not(in=or3, out=zr);
}